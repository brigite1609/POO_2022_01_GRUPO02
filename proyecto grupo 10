PRINCIPAL
#include <iostream>
#include <string>
#include "productosVector.h"
#include "vectorBoleta.h"
#include "empleados.h"
#include <conio.h>
using namespace std;
// Globales
Productos objProductos;
Empleados objEmpleados;
ProductosVector PV;
Boleta objBoleta;
int codigo;
string contra;
char caracter;
// Funciones
void ingreso();
void listaDeOpciones();
void listaDeProductos (ProductosVector);
void compAdicional (ProductosVector);
void listar (ProductosVector);
void rptaCliente (ProductosVector);
void datosCliente (ProductosVector);
void corregirBoleta (ProductosVector);
void cambiarProducto (ProductosVector);
void agregarProducto (ProductosVector);
void eliminarProducto (ProductosVector);
void boleta (ProductosVector);
void cierre ();
int main()
{
	ingreso();
	if (objEmpleados.getCodigos() == 001 && objEmpleados.getcontrasena() == "ola")
	{
		cout<<"\nBIENVENIDO AL SISTEMA ";
		
		system ("pause");
		system ("cls");
		listaDeOpciones ();
	}
	else 
	{
		cout<<"\nUsuario o Contrasena incorrecto ";
		system ("pause");
		system ("cls");
    }
}
void ingreso()
	{
	
 cout << "\t\t\tLOGIN DE USUARIO" << endl;
        cout << "\t\t\t----------------" << endl;
        cout << "\n\tcodigo: ";
        cin>>codigo;
	    cout << "\n\tcontrasena ";
	    
	    
	       caracter = getch();
	    contra = "" ;
	while (caracter != 13){
		contra.push_back(caracter);
		cout<<"*";
		caracter = getch();
		
}
	objEmpleados.setCodigo(codigo);
	objEmpleados.setContrasena(contra);
}
void listaDeOpciones ()
{
	int opt;
	do
	{
		ProductosVector proV;
		cout << "\t\t\tMENU DE OPCIONES" << endl;
		cout<<"Cierre de caja:  [1] \n";
		cout<<"Realizar venta:  [2] \n";	
		cout<<"Cerrar sesion: [3] \n";
		cout<<"Ingrese una opcion [1-3]: ";
		cin>>opt;
		switch (opt)
		{
			case 1: system ("cls");
					cierre ();
					break;
			case 2: system ("cls");
					listaDeProductos (proV);
					break;
			case 3: system ("cls");
					ingreso ();
					break;
			default: cout<<"Ingrese una opcion correcta[1-3]"<<endl;
		}
	}
	while(opt!=3);
}
void listaDeProductos (ProductosVector proV)
{
	int opt;
	int cantidad;
		cout << "\t\t\tPRODUCTOS" << endl;
		cout<<"Corazon aesthetic [1] \n";
		cout<<"Sirenita mini [2] \n";
		cout<<"Butterfly [3] \n";
		cout<<"Chocolate lover [4] \n";
		cout<<"Cheescake de fresa [5] \n";
		cout<<"Torta de chocolate [6] \n";
		cout<<"Tres leches [7] \n";
		cout<<"Tarta Red Velvet [8] \n";
		cout<<"Torta helada [9] \n";
		cout<<"Selva negra [10] \n";
	cout<<"Digite el codigo del producto [1-10]: ";
	cin>>opt;
	cout<<"Ingresar cantidad a comprar: ";
	cin>>cantidad;
	system ("cls");
	if (opt == 1)
	{
		objProductos.setProducto("Corazon aesthetic");
		objProductos.setPrecio(50);
		objProductos.setCodigo(1);
		objProductos.setCantidad(cantidad);
		PV.add(objProductos);
		proV.add(objProductos);
		PV.grabarEnArchivo (objProductos);
		//cierre.add(objProductos);
		compAdicional (proV);
	}
	else if (opt == 2)
	{
		objProductos.setProducto("Sirenita mini");
		objProductos.setPrecio(100);
		objProductos.setCodigo(2);
		objProductos.setCantidad(cantidad);
		PV.add(objProductos);
		proV.add(objProductos);
		PV.grabarEnArchivo (objProductos);
		//cierre.add(objProductos);
		compAdicional (proV);
	}
	else if (opt == 3)
	{
		objProductos.setProducto("Butterfly");
		objProductos.setPrecio(120);
		objProductos.setCodigo(3);
		objProductos.setCantidad(cantidad);
		PV.add(objProductos);
		proV.add(objProductos);
		PV.grabarEnArchivo (objProductos);
		compAdicional (proV);
	}
	else if (opt == 4)
	{
		objProductos.setProducto("Chocolate love");
		objProductos.setPrecio(150);
		objProductos.setCodigo(4);
		objProductos.setCantidad(cantidad);
		PV.add(objProductos);
		proV.add(objProductos);
		PV.grabarEnArchivo (objProductos);
		compAdicional (proV);
	}	
	else if (opt == 5)
	{
		objProductos.setProducto("Cheescake de fresa");
		objProductos.setPrecio(60);
		objProductos.setCodigo(5);
		objProductos.setCantidad(cantidad);
		listar (proV);
		PV.add(objProductos);
		proV.add(objProductos);
		PV.grabarEnArchivo (objProductos);
		compAdicional (proV);
	}
	else if (opt == 6)
	{
		objProductos.setProducto("Torta de chocolate");
		objProductos.setPrecio(70);
		objProductos.setCodigo(6);
		objProductos.setCantidad(cantidad);
		PV.add(objProductos);
		proV.add(objProductos);
		PV.grabarEnArchivo (objProductos);
		compAdicional (proV);
	}			
	else if (opt == 7)
	{
		objProductos.setProducto("Tres leches");
		objProductos.setPrecio(50);
		objProductos.setCodigo(7);
		objProductos.setCantidad(cantidad);
		PV.add(objProductos);
		proV.add(objProductos);
		PV.grabarEnArchivo (objProductos);
		compAdicional (proV);
	}	
	else if (opt == 8)
	{
		objProductos.setProducto("Tarta Red Velvet");
		objProductos.setPrecio(120);
		objProductos.setCodigo(8);
		objProductos.setCantidad(cantidad);
		PV.add(objProductos);
		proV.add(objProductos);
		PV.grabarEnArchivo (objProductos);
		compAdicional (proV);
	}		
	else if (opt == 9)
	{
		objProductos.setProducto("Torta helada");
		objProductos.setPrecio(60);
		objProductos.setCodigo(9);
		objProductos.setCantidad(cantidad);
		PV.add(objProductos);
		proV.add(objProductos);
		PV.grabarEnArchivo (objProductos);
		compAdicional (proV);
	}
		else if (opt == 10)
	{
		objProductos.setProducto("Selva negra");
		objProductos.setPrecio(65);
		objProductos.setCodigo(10);
		objProductos.setCantidad(cantidad);
		PV.add(objProductos);
		proV.add(objProductos);
		PV.grabarEnArchivo (objProductos);
		compAdicional (proV);
	}
	else
	{
		cout << "OPCION INCORRECTO!!!!" << endl;
		system ("cls");
		listaDeOpciones ();  
    }
}
void listar (ProductosVector proV)
{
	for (int i = 0; i < proV.rows(); i++)
	{
		cout<<"Codigo: "<<proV.get(i).getCodigo()<<"\t";
		cout<<"Producto: "<<proV.get(i).getProducto()<<"\t";
		cout<<"Precio: "<<proV.get(i).getPrecio()<<"\t";
		cout<<"Cantidad: "<<proV.get(i).getCantidad()<<"\n";
	}
}
void compAdicional (ProductosVector proV)
{
	string rpta;
	listar (proV);
	cout<<"Desea agregar una venta (SI/NO): ";
	cin>>rpta;
	system ("cls");
	if (rpta == "SI" || rpta == "si")
	{
		listaDeProductos (proV);
	}
	else if (rpta == "NO" || rpta == "no")
	{
		rptaCliente (proV);
	}
	else 
	{
		system ("cls");
		cout<<"RESPUESTA INCORRECTA!!!!"<<endl;
		system ("pause");
		system ("cls");
	}
}
void rptaCliente (ProductosVector proV)
{
	string rpta;
	listar (proV);
	cout<<"Tomar datos del cliente (SI/NO): ";
	cin>>rpta;
	system ("cls");
	if (rpta == "SI", rpta == "si")
	{
		datosCliente (proV);
	}
	else if (rpta == "NO", rpta == "no")
	{
		corregirBoleta (proV);
	}
	else 
	{
		system ("cls");
		cout<<"INGRESE UNA OPCION CORRECTA!!!!! \n";
		system ("pause");
	}
}
void datosCliente (ProductosVector proV)
{
	string nombre;
	string apellido;
	string direccion;
	string distrito;
	int telefono;
	int dd, mm, aa;
	cout<<"Ingresar Fecha de venta: "<<endl;
	cout<<"Dia: ";
	cin>>dd;
	cout<<"Mes: ";
	cin>>mm;
	cout<<"AÃ±o: ";
	cin>>aa;
	string correo;
	cout<<"Nombre: ";
	cin>>nombre;
	cout<<"Apellido: ";
	cin>>apellido;
	cout<<"Direccion: ";
	cin>>direccion;
	cout<<"Distrito: ";
	cin>>distrito;
	cout<<"Telefono: ";
	cin>>telefono;
	cout<<"Correo: ";
	cin>>correo;
	objBoleta.setDd(dd);
	objBoleta.setMm(mm);
	objBoleta.setAa(aa);
	objBoleta.setNombre(nombre);
	objBoleta.setApellido(apellido);
	objBoleta.setDireccion(direccion);
	objBoleta.setDistrito(distrito);
	objBoleta.setTelefono(telefono);
	objBoleta.setCorreo(correo);
	system ("cls");
	boleta (proV);
}
void corregirBoleta (ProductosVector proV)
{
	int opt; 
	
	cout<<"Cambiar producto (s): [1] \n";
	cout<<"Cancelar venta: [2] \n";
	cout<<"Eliminar producto: [3] \n";
	cout<<"Agregar producto: [4] \n";
	cout<<"Tomar datos del cliente [5] \n";
	cout<<"Seleccionar una opcion [1-5]: ";
	cin>>opt;
	switch (opt)
		{
			case 1: system ("cls");
					cambiarProducto (proV);
					break;
			case 2: system ("cls");
					listaDeProductos (proV);
					break;
			case 3: system ("cls");
					eliminarProducto (proV);
					break;
			case 4: system ("cls");
					agregarProducto (proV);
					break;
			case 5: system ("cls");
					datosCliente (proV);
					break;
			default: cout<<"Ingrese una opcion correcta[1-4]: "<<endl;
		}
}
void cambiarProducto (ProductosVector proV)
{
	int cod;
	listar (proV);
	cout<<"Ingresar codigo del producto a cambiar: ";
	cin>>cod;
	Productos objModificar = proV.buscarPorCodigo(cod);
	if (objModificar.getProducto() != "Error")
	{
		proV.remove(objModificar);
		system ("cls");
		listaDeProductos (proV);
		PV.grabarModificarEliminarArchivo();
	}
	else 
	{
		cout<<"No se encontro el registro!\n";
	}
}
void agregarProducto (ProductosVector proV)
{
	listaDeProductos (proV);
}
void eliminarProducto (ProductosVector proV)
{
	int rpta;
	string resp;
	do
	{
	listar (proV);
	cout<<"Ingrese el codigo del producto que desea eliminar: ";
	cin>>rpta;
	Productos objAEliminar = proV.buscarPorCodigo(rpta);
	if (objAEliminar.getProducto() != "Error")
	{
		PV.remove(objAEliminar);
		cout<<"Registro Eliminado Satisfactoriamente"<<endl;
		PV.grabarModificarEliminarArchivo();
	}
	else 
	{
		cout<<"No se encontro el registro!\n";
	}
	cout<<"Desea elimar otro producto: ";
	cin>>resp;
	}
	while (resp == "SI" || resp == "si");
	system ("cls");
	corregirBoleta (proV);
}
void boleta (ProductosVector proV)
{
	int cod;
	string rpta;
	BoletaVector bolV;
	cod = bolV.getCorrelativo();
	float suma = 0;
	cout<<"Codigo de la boleta: "<<cod<<endl;
	cout<<"Codigo del empleado: "<<objEmpleados.getCodigos()<<endl;
	cout<<"Fecha: "<<objBoleta.getDd()<<"/"<<objBoleta.getMm()<<"/"<<objBoleta.getAa()<<endl;
	cout<<"Nombre del cliente: "<<objBoleta.getNombre()<<endl;
	cout<<"Apellido del cliente: "<<objBoleta.getApellido()<<endl;
	cout<<"Telefono del cliente: "<<objBoleta.getFono()<<endl;
	listar (proV);
	for (int i = 0; i < PV.rows(); i++)
	{
		suma += proV.get(i).precioTotal();		
	}
	cout<<"Total a pagar: "<<suma<<endl;
	cout<<"Desea imprimir boleta: ";
	cin>>rpta;
	if (rpta == "si" || rpta == "SI"|| rpta == "no" || rpta == "NO" )
	{
		system ("cls");
	}
	else 
	{
		cout<<"RESPUESTA INCORRECTA!!!";
		system ("cls");
	}
		
}
void cierre ()
{
	for (int i = 0; i < PV.rows(); i++)
	{
		cout<<"Codigo: "<<PV.get(i).getCodigo()<<"\t";
		cout<<"Nombre del producto: "<<PV.get(i).getProducto()<<"\t";
		cout<<"Precio: "<<PV.get(i).getPrecio()<<"\t";
		cout<<"Cantidad: "<<PV.get(i).getCantidad()<<"\n";		
	}
	system ("pause");
	system ("cls");
	ingreso ();
}

empleados.h
#include <iostream>
#include <vector>
#include <string>
using namespace std;
class Empleados
{
  //declaraciÃ³n de variables
  	private:
  		int codigo;
	  	string contrasena;
	public:
	  	Empleados(int cod,string contra)
		{
	  		codigo=cod;
	  		contrasena=contra;
	  	}
	  	Empleados()
	  	{
	  	
	  	}
	  
	  // Set 
	    void setCodigo(int valor)
		{
	    	codigo = valor;
		}
	    void setContrasena(string valor)
		{
	    	contrasena = valor;
		}
	  // Get
	    int getCodigos()
		{
			return codigo;
		}
	    string getcontrasena()
		{ 
			return contrasena;
		}
	  // Funciones
	    
	
	};

clientes.h
#include <string>
using namespace std;
class Clientes
{
	private:
		string 	nombre;
		string	apellido;
		string 	direccion;
		string 	distrito;
		int 	telefono;
		string 	correo;
	public:
		
		// Constructor
		Clientes (string nom, string ape, string direc, string dis, int tel, string cor)
		{
			nombre 		= nom;
			apellido 	= ape;
			direccion 	= direc;
			distrito  	= dis;
			telefono 	= tel;
			correo 		= cor;
		}
		Clientes ()
		{
			
		}
		
		// Set
		void setNombre (string valor)
		{
			nombre = valor;
		}
		void setApellido (string valor)
		{
			apellido = valor;
		}
		void setDireccion (string valor)
		{
			direccion = valor;
		}
		void setDistrito (string valor)
		{
			distrito = valor;
		}
		void setTelefono (int valor)
		{
			telefono = valor;
		}
		void setCorreo (string valor)
		{
			correo = valor;
		}
		
		// Get 
		string getNombre ()
		{
			return nombre;
		}
		string getApellido ()
		{
			return apellido;
		}
		string getDireccion ()
		{
			return direccion;
		}
		string getDistrito ()
		{
			return distrito;
		}
		int getFono ()
		{
			return telefono;
		}
		string getCorreo ()
		{
			return correo;
		}
};

boleta.h
#include"clientes.h"
class Boleta: public Clientes
{
	private:
		int dd, mm, aa;
		int codigo;
	public: 
		Boleta (string nom, string ape, string direc, string dis, int tel, string cor, int dd, int mm, int aa, int codigo): 
		Clientes (nom, ape, direc, dis, tel, cor)
		{
			this -> dd 		= dd;
			this -> mm 		= mm;
			this -> aa 		= aa;
			this -> codigo 	= codigo;
		}
		Boleta ()
		{
			
		}
		
		void setDd (int valor)
		{
			dd = valor;
		}
		void setMm (int valor)
		{
			mm = valor;
		}
		void setAa (int valor)
		{
			aa = valor;
		}
		void setCodigo (int valor)
		{
			codigo = valor;
		}
		int getDd ()
		{
			return dd;
		}
		int getMm ()
		{
			return mm;
		}
		int getAa ()
		{
			return aa;
		}
		int getCodigo ()
		{
			return codigo;
		}
};


productos.h
#include <string>
#include <iostream>
using namespace std;
class Productos 
{
	private:
		int codigo;
		string producto;	
		float  precio;	  
		int cantidad; 
	public:
		Productos (int codigo, string product, float precio, int cantidad)
		{
			producto 			= product;
			this -> precio 		= precio;
			this -> codigo 		= codigo;
			this -> cantidad 	= cantidad;
		}
		Productos ()
		{
			
		}
		
		// Set
		void setCodigo (int valor)
		{
			codigo = valor;
		}
		void setProducto (string valor)
		{
			producto = valor;
		}
		void setPrecio (int valor)
		{
			precio = valor;
		}
		void setCantidad (int valor)
		{
			cantidad = valor;
		}
		// Get 
		string getProducto ()
		{
			return producto;	
		}			
		int getPrecio ()
		{
			return precio;
		}
		int getCodigo ()
		{
			return codigo;
		}
		int getCantidad ()
		{
			return cantidad;
		}
		float precioTotal ()
		{
				return getCantidad () * getPrecio ();
		}
};


productosVector.h
#include<vector>
#include"productos.h"
#include<iostream>
#include<string>
#include<fstream>
using namespace std;
class ProductosVector 
{
	private: 
		vector <Productos> vectorProductos;
	public: 
		ProductosVector ()
		{
			vector <Productos> vectorProductos;
		}
		void add (Productos obj)
		{
			vectorProductos.push_back(obj);
		}
		Productos get(int pos)
		{
			return vectorProductos[pos];
		}
		int rows ()
		{
			return vectorProductos.size();
		}
		Productos buscarPorCodigo (int codigo)
		{
			Productos objError;
			objError.setProducto("Error");
			for (Productos x:vectorProductos)
			{
				if (codigo == x.getCodigo())
				{
					return x;
				}
			}
			return vectorProductos[-1];
		}
		int getPostArray (Productos obj)
		{
			for (int i = 0; i <= rows (); i++)
			{
				if (obj.getCodigo () == get(i).getCodigo())
				{
					return i;
				}
			}
			return -1;
		}
		// Borrar elemento del vector
		void remove (Productos obj)
		{
			vectorProductos.erase(vectorProductos.begin() + getPostArray (obj));
		}
		bool modificar (Productos obj, string nom, int cantidad)
		{
			for (int i = 0; i <= rows (); i++)
			{
				if (obj.getCodigo () == get(i).getCodigo())
				{
					get(i).setProducto (nom);
					get(i).setCantidad (cantidad);
					return true;
				}
			}
			return false;
		}
		void grabarEnArchivo(Productos product)
		{
			try
			{
				fstream archivoProducto;
				archivoProducto.open("Productos_Vendidos_Del_DÃ­a.csv",ios::app);
				if(archivoProducto.is_open())
				{
					archivoProducto<<product.getCodigo()<<";"<<product.getProducto()<<";"<<product.getPrecio()<<";"<<product.getCantidad()<<";"<<"\n";
					archivoProducto.close();
				}
			}			
			catch(exception e)
			{
				cout<<"Ocurrio un error al grabar el registro!!!";
			}
		}
		void grabarModificarEliminarArchivo()
		{
			try
			{
				fstream archivoProducto;
				archivoProducto.open("Productos_Vendidos_Del_DÃ­a.csv", ios::out);
				if (archivoProducto.is_open())
				{
					for (Productos x : vectorProductos)
					{
					archivoProducto << x.getCodigo() << ";" << x.getProducto () << ";" << x.getPrecio () << ";" << x.getCantidad () << ";" << "\n";
					}
					archivoProducto.close();
				}
			}
			catch (exception e)
			{
				cout << "Ocurrio un error al grabar en el archivo";
			}
		}
	void cargarDatosDelArchivoAlVector()
	{
		try
		{
			int i;
			size_t posi;//Cantidad maxima
			string linea;
			string temporal[4];//Cantidad de columnas
			fstream archivoProducto;
			archivoProducto.open("Productos_Vendidos_Del_DÃ­a.csv.csv", ios::in);
			if (archivoProducto.is_open())
			{
				while (!archivoProducto.eof()) 
				{
					while (getline(archivoProducto, linea))
					{
						i = 0;
						while ((posi = linea.find(";")) != string::npos) 
						{
							temporal[i] = linea.substr(0, posi);
							linea.erase(0, posi + 1);
							i++;
						}
						//Asignando los valores al vector
						Productos product;
						product.setCodigo(std::stoi(temporal[0]));
						product.setProducto(temporal[1]);
						product.setPrecio(std::stoi(temporal[2]));
						product.setCantidad(std::stoi(temporal[3]));
						add(product);
					}
				}
			}
			archivoProducto.close();
		}
		catch (exception e)
		{
			cout << "Ocurrio un error al leer el archivo";
		}
	}
	
	};
vectorBoleta.h
#include <vector>
#include "boleta.h"
class BoletaVector
{
	private: 
		vector <Boleta> vectorBoleta;
	public: 
		BoletaVector ()
		{
			vector <Boleta> vectorBoleta;
		}
		void add (Boleta obj)
		{
			vectorBoleta.push_back(obj);
		}
		Boleta get(int pos)
		{
			return vectorBoleta[pos];
		}
		int rows ()
		{
			return vectorBoleta.size();
		}
		int getCorrelativo()
		{
			if(rows () == 0)
			{
				return 1;
			}
			else
			{
				return vectorBoleta[rows() - 1].getCodigo() + 1;
			}
		}
};















